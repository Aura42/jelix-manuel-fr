~~LANG:EN@enman:installation/migrate~~

Lors d'une migration d'une version Jelix à une autre, il y a toujours au moins ces étapes à faire :

  * Remplacer le répertoire @@F@lib/@@ de jelix par celui contenu dans le paquet jelix.
  * Ne pas oublier de remettre dans le nouveau répertoire @@F@lib/@@ vos éventuelles bibliothèques personnelles si vous en aviez mis dans l'ancien.
  * **supprimer** tous les fichiers dans le répertoire @@F@temp/votre_appli@@ 
  * adapter votre code en suivant les instructions indiquées pour chaque ancienne version de Jelix. Voir ci-dessous.

===== Mettre à jour depuis Jelix 1.2 et inférieur =====

Suivez les indications de migration de chaque version intermédiaire (voir les manuels correspondant), avant de mettre à jour pour jelix 1.3.

===== Mettre à jour depuis Jelix 1.3 =====

Voici les instructions à suivre dans l'ordre.

==== Sauvegarde ====

Tout d'abord, faites une sauvegarde de votre base de données, de vos fichiers de configuration etc.

==== Répertoires temporaires ====

Comme d'habitude, vous devez vider le contenu de votre répertoire @@F@temp/votreapp/@@.



==== Changez vos points d'entrées ====

@@C@jApp@@ fournissant de nouvelles API, il faut changer le code de vos points d'entrées.

  * L'instance du coordinateur doit être indiqué à @@C@jApp@@.
  * Le chemin du fichier de configuration doit être lui aussi indiqué à @@C@jApp@@ au lieu d'être passé en paramètre au coordinateur
  * Voyez un exemple dans le template dans @@F@lib/jelix-scripts/templates/www/index.php.tpl@@
 
Voici un exemple typique:

<code php>
require ('../application.init.php');
require (JELIX_LIB_CORE_PATH.'request/jClassicRequest.class.php');

checkAppOpened();

// Charge la configuration
jApp::loadConfig('index/config.ini.php');

// nouveau coordinateur, que l'on indique à jApp
jApp::setCoord(new jCoordinator());

// Nouvel objet request, que l'on passe au coordinateur, pour traiter le routage.
jApp::coord()->process(new jClassicRequest());

</code>



==== Suppression de fichiers ====


==== Modifications générales ====

==== Mise à jour des modules ====

Mettez à jour les sources des modules tiers que vous avez installés, et qui sont compatibles avec Jelix 1.4.

Et pour vos propres modules, vous devez adapter le code source en faisant les modifications suivantes :

  * La variable globale @@V@$gJConfig@@ est obsolète. Utilisez maintenant @@M@jApp::config()@@ pour récupérer la configuration.
  * La variable globale @@V@$gJCoord@@  est obsolète. Utilisez maintenant @@M@jApp::coord()@@ pour récupérer l'objet coordinateur.
  * Dans les fichiers @@F@module.xml@@, indiquez que le module est compatible avec Jelix 1.4 (changer l'attribut @@A@maxversion@@). Exemple :

<code xml>
        <jelix minversion="1.3" maxversion="1.4.*"/>
</code>



Nouvelles API que vous pouvez utiliser (non exhaustives) :
   * TODO

API que vous ne pouvez plus utiliser :
   * TODO


==== Mise à jour de Jelix ====

Après toutes les modifications effectuées, vous devez lancer le script installer.php de votre application. Le module jelix fera le reste des modifications, en particulier :

  * dans vos fichiers de configuration.
  * TODO
