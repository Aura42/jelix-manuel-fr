===== Déclarer les répertoires de modules =====

Un module est un répertoire dans lequel il y a une arborescence précise. Les modules sont regroupés dans un ou plusieurs répertoires que l'on appelle groupe de modules, ou aussi dépôt de modules.

==== Configuration générale ====

Pour avoir accès aux modules, il faut déclarer ces dépôts de modules dans la configuration, par la propriété **modulesPath**. On peut y indiquer plusieurs chemins en les séparant par des virgules. On peut indiquer soit des chemins complets, soit des chemins relatifs à un répertoire spécifique de l'arborescence Jelix. Ces chemins relatifs ont une notation spéciale :

   coderepertoire:chemin/relatif/

//coderepertoire// est un de ces codes :

| **lib** | répertoire lib/ de jelix |
| **app** | répertoire de l'application |

Cela évite d'avoir à indiquer un véritable chemin relatif. Et donc d'avoir à changer à la fois le fichier application.init.php et le fichier de configuration quand on fait une modification dans l'arborescence, quand on migre l'application d'un serveur à un autre (entre le développement et la production par exemple). 

Exemple :

<code ini>
   modulesPath = lib:jelix-modules/,app:modules/
</code>

On déclare ici qu'il y a deux dépôts de modules : le premier, //jelix-modules//, se trouvant dans le répertoire //lib// de jelix; le deuxième, le répertoire //modules// de l'application.

Tous les modules se trouvant dans ces deux répertoires seront utilisables et les actions qu'ils déclarent pourront être appelées depuis un navigateur.

==== Restrictions ====

Il se peut que parmi les modules présents dans un dépôt, on veuille en désactiver certains : cela peut arriver si ce groupe de module est partagé par plusieurs applications et que pour l'application courante, on ne veuille pas utiliser certains de ces modules. Ou encore que pour plus de sécurité, on interdisent l'accès à certains modules pour certains points d'entrée.

On dispose alors de deux paramètres de configuration :

<code ini>
   checkTrustedModules = on
   trustedModules = foo,bar,baz
</code>

On active la restriction d'accès via le paramètre **checkTrustedModules**, et on indique les modules autorisés dans **trustedModules**. Les autres modules ne seront pas accessibles de l'extérieur. Par contre, les modules autorisés peuvent accéder aux ressources des modules non autorisés (classes, zones, dao...).


===== Créer un module =====

Le principe : il suffit de créer un répertoire dans un dépôt, avec un nom précis, et d'y mettre les contrôleurs, les daos et tout ce qu'il faut dans leurs sous-répertoires respectifs.

Le plus simple est encore d'utiliser le script jelix et la commande **createmodule** :
<code bash>
   php jelix.php createmodule monmodule
</code>

Cela vous créé un module de nom "monmodule" dans le répertoire //modules/// de l'application, des sous répertoires ainsi qu'un contrôleur par défaut. 

**Important** : Le nom des modules est repris dans certaines classes générées automatiquement par Jelix, aussi ne peut-il comporter que des caractères autorisés par PHP pour les noms de classes : lettres minuscules, majuscules, non accentuées, les chiffres et le caractère _.