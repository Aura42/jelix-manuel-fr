Vous avez vu comment décrire dans un fichier XML un DAO (voir [[fichier_de_base]]). Ce fichier, vous devez le stocker dans un répertoire "daos/" d'un module et le nommer comme ceci : //nom//.dao.xml. //nom// est le nom de votre DAO.

Souvenez vous qu'en fait vous définissez deux objets : 

   * un objet DAO qui est une factory : elle permet de récupérer, insérer, modifier, effacer un ou plusieurs enregistrements. Elle propose des méthodes de base, mais contient aussi les méthodes dont vous avez décris les propriétés dans le fichier XML
   * un objet record DAO qui représente un enregistrement et dont vous avez décris les propriétés dans le fichier XML

===== Récupérer la factory =====

Pour récupérer ces objets il faut passer par l'objet jDao qui propose diverses méthodes statiques :

   * **get** : permet d'obtenir une factory. renvoi toujours la même instance (utilise un singleton)
   * **create** : permet d'obtenir une nouvelle instance d'une factory. rarement utile.
   * **createRecord** : permet d'obtenir un objet DAO record vide.
   * **createConditions** : permet d'obtenir un objet jDAOConditions qui permet d'indiquer des conditions de sélection pour récupérer un ensemble d'objet record.
   
get, create et createRecord prennent tous en argument un sélecteur de fichier DAO et un deuxième paramètre facultatif qui est le nom du [[/bd|profil jDb]] à utiliser (si paramètre absent, il prendra celui par défaut).

Si le profil jDb utilisé spécifie un préfixe de table, alors toutes les tables indiquées dans le DAO verront leur nom préfixé par la valeur de ce paramètre.

En admettant qu'il y ait un fichier DAO foo.dao.xml dans le module bar :

<code php>
   $maDao = jDao::get("bar~foo");
   // ou si cette ligne de code est dans un fichier du module bar :
   $maDao = jDao::get("foo");
   
   $monRecord = jDao::createRecord("foo");
</code>

$maDao contient une factory de foo, et $monRecord un enregistrement vide de type foo.

===== Récupérer des records =====

Une factory DAO propose par défaut deux méthodes :

   * findAll : pour récupérer tous les enregistrements
   * get : pour récuperer un enregistrement en indiquant sa clé

<code php>
  
   // instanciation de la factory
   $maFactory = jDao::get("foo");
   
   // récupération d'une liste complète de records de type foo
   $liste = $maFactory->findAll();
   
   // récupération d'un record dont le contenu correspond 
   // à l'enregistrement ayant pour identifiant  3
   $baz = $maFactory->get(3);

</code>

Vous pouvez réaliser d'autres méthodes de récupération, en les spécifiant dans le fichier XML (voir [[methodes_xml|DAO avancés]]).


===== Récupérer des records selon critères =====

Les factory DAO mettent à disposition la méthode findBy, qui s'utilise en lui passant un objet jDaoConditions :

<code php>   
   $conditions = jDao::createConditions();
   $conditions->addCondition('libelle','=',$un_nom);
   $conditions->addCondition('status','=',5);
   
   $liste = $maFactory->findBy($conditions);
</code>

La méthode addCondition prend en paramètre un nom de propriété, un opérateur (SQL), et une valeur. findBy renvoi la liste des records qui correspondent aux critères indiqués. Vous pouvez aussi indiquer un ordre de sélection, et regrouper divers critères ensemble :

<code php>   
   $conditions = jDao::createConditions();
   
   // condition : libelle = $un_nom AND (status=5 OR status=4) ORDER BY libelle desc
   $conditions->addCondition('libelle','=',$un_nom);   
   $conditions->startGroup('OR');
        $conditions->addCondition('status','=',5);
        $conditions->addCondition('status','=',4);
   $conditions->endGroup(); 
   $conditions->addItemOrder('libelle','desc');
   
   $liste = $maFactory->findBy($conditions);
</code>

Pour ajouter une clause LIMIT, La méthode findBy prend en plus 2 paramètres optionnels: (int $limitOffset, int $limitCount)
Par exemple pour récupérer les 15 premiers enregistrements :

<code php>
$liste = $maFactory->findBy($conditions, 0, 15);
</code>

Vous verrez que vous pouvez obtenir le même résultat via des méthodes dans le fichier XML. Cependant, l'utilisation de l'une ou l'autre des possibilités dépend du contexte.

Vous utiliserez jDaoConditions lorsque que vous ne savez pas à l'avance le nombre de critères et leur type. Cela peut être le cas suite à un formulaire de recherche complexe, où l'utilisateur peut choisir ses critères. Vous utiliserez aussi jDaoConditions lorsque la recherche que vous faîtes n'est utilisée qu'à un seul moment et rarement. En effet, les méthodes XML sont compilées en PHP, et donc incluses à chaque fois que vous faites appel à la factory. Il n'est peut-être pas utile d'inclure à chaque fois du code qui ne sert presque jamais. Cela améliore les performances globales.

Dans les autres cas, il est recommandé de passer par les méthodes XML, en particulier donc quand vous connaissez les critères à l'avance (sans forcément connaître leur valeur bien sûr), et que c'est une recherche souvent utilisée.

Il arrive souvent par exemple de redéfinir la méthode findAll en XML, pour indiquer un ordre de récupération...


===== Créer, modifier, effacer un enregistrement =====

Les méthodes insert, update, et delete de la factory sont faites pour ça. Aux deux premières, vous indiquez un record. Pour delete, vous indiquez les clés de l'enregistrement.

==== Création ====

Il faut récupérer un nouvel objet record, le remplir, et ensuite appeler la méthode insert

<code php>
   // instanciation de la factory
   $maFactory = jDao::get("foo");

   // creation d'un record correspondant au dao foo
   $record = jDao::createRecord("foo");

   // on remplie le record
   $record->champ1 = "hello";
   $record->champ2 = "...";

   // on le sauvegarde dans la base
   $maFactory->insert($record);   

</code>

Si il y a des champs de type autoincrement, les propriétés correspondantes dans  $record seront mises à jour avec la nouvelle valeur.

==== Modification ====

Le processus est le suivant : on récupère un objet record, on modifie ses propriétés, et on appelle la méthode update :


<code php>
   // instanciation de la factory
   $maFactory = jDao::get("foo");

   // récupération du record dont l'identifiant est 3
   $record = $maFactory->get(3);

   // on modifie le record
   $record->champ1 = "hello";
   $record->champ2 = "...";

   // on le sauvegarde dans la base
   $maFactory->update($record);   

</code>



==== Destruction ====

Il suffit d'appeler la méthode delete en donnant l'id du record à détruire


<code php>
   // instanciation de la factory
   $maFactory = jDao::get("foo");

   // destruction du record dont l'identifiant est 3
   $maFactory->delete(3);
</code>
